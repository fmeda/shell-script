#!/bin/bash

# Pentest Toolkit - Script Interativo para Testes de Invasão e Pentest
# Desenvolvido para auxiliar profissionais de segurança em suas atividades diárias.

# Cores para a interface
green="\e[32m"
red="\e[31m"
yellow="\e[33m"
blue="\e[34m"
nc="\e[0m" # Reset color

# Arquivo de log
LOG_FILE="/var/log/pentest_toolkit.log"

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
   echo -e "${red}Este script precisa ser executado como root.${nc}"
   exit 1
fi

# Função de log
log_msg() {
    echo "$(date) - $1" | tee -a $LOG_FILE
}

# Função para verificar e instalar dependências
check_and_install_dependencies() {
    REQUIRED_PACKAGES=(
        "nmap"
        "theHarvester"
        "amass"
        "openvas"
        "nuclei"
        "burpsuite"
        "owasp-zap"
        "wpscan"
        "hydra"
        "hashcat"
    )

    for pkg in "${REQUIRED_PACKAGES[@]}"; do
        command -v $pkg &>/dev/null
        if [[ $? -ne 0 ]]; then
            echo -e "${red}$pkg não encontrado.${nc}"
            echo -e "${yellow}Tentando instalar $pkg...${nc}"
            # Tentando instalar pacotes em sistemas Debian/Ubuntu
            apt-get update -y && apt-get install -y $pkg
            if [[ $? -eq 0 ]]; then
                log_msg "Pacote $pkg instalado com sucesso."
            else
                echo -e "${red}Falha ao instalar $pkg. Por favor, instale manualmente.${nc}"
                log_msg "Falha ao instalar o pacote $pkg."
                exit 1
            fi
        else
            echo -e "${green}$pkg já está instalado.${nc}"
        fi
    done
}

# Função para exibir o menu principal
menu_principal() {
    clear
    echo -e "${blue}=====================================${nc}"
    echo -e "${yellow}         Pentest Toolkit             ${nc}"
    echo -e "${blue}=====================================${nc}"
    echo -e "${green}1. Coleta de Informações${nc}"
    echo -e "${green}2. Análise de Vulnerabilidades${nc}"
    echo -e "${green}3. Testes de Aplicações Web${nc}"
    echo -e "${green}4. Ataques de Senhas${nc}"
    echo -e "${green}5. Testes Remotos via SSH${nc}"
    echo -e "${green}6. Testes Locais${nc}"
    echo -e "${red}7. Sair${nc}"
    echo -e "${blue}=====================================${nc}"
    read -p "Selecione uma opção: " opcao
    case $opcao in
        1) coleta_informacoes ;;
        2) analise_vulnerabilidades ;;
        3) testes_aplicacoes_web ;;
        4) ataques_senhas ;;
        5) testes_remotos_ssh ;;
        6) testes_locais ;;
        7) exit 0 ;;
        *) echo -e "${red}Opção inválida.${nc}"; sleep 2; menu_principal ;;
    esac
}

# Funções para cada categoria
coleta_informacoes() {
    log_msg "Iniciando coleta de informações"
    echo "Executando ferramentas de coleta de informações..."
    nmap -v || { log_msg "Erro ao executar nmap"; exit 1; }
    theHarvester -h || { log_msg "Erro ao executar theHarvester"; exit 1; }
    amass enum -h || { log_msg "Erro ao executar amass"; exit 1; }
    sleep 3
    menu_principal
}

analise_vulnerabilidades() {
    log_msg "Iniciando análise de vulnerabilidades"
    echo "Executando scanners de vulnerabilidades..."
    openvas -s || { log_msg "Erro ao executar openvas"; exit 1; }
    nuclei -h || { log_msg "Erro ao executar nuclei"; exit 1; }
    sleep 3
    menu_principal
}

testes_aplicacoes_web() {
    log_msg "Iniciando testes de aplicações web"
    echo "Rodando ferramentas de pentest web..."
    burpsuite & 
    owasp-zap & 
    wait
    wpscan --url example.com || { log_msg "Erro ao executar wpscan"; exit 1; }
    sleep 3
    menu_principal
}

ataques_senhas() {
    log_msg "Iniciando ataques de senhas"
    echo "Rodando ataques de força bruta e cracking de hashes..."
    hydra -h || { log_msg "Erro ao executar hydra"; exit 1; }
    hashcat -h || { log_msg "Erro ao executar hashcat"; exit 1; }
    sleep 3
    menu_principal
}

testes_remotos_ssh() {
    log_msg "Iniciando testes remotos via SSH"
    echo "Testando conexões SSH..."
    read -p "Digite o IP do alvo: " ip
    if [[ ! $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${red}IP inválido.${nc}"
        menu_principal
    fi
    ssh -q -o BatchMode=yes root@$ip "exit" || { echo -e "${red}Falha na conexão SSH.${nc}"; log_msg "Falha na conexão SSH para $ip"; menu_principal; }
    menu_principal
}

testes_locais() {
    log_msg "Iniciando testes locais"
    echo "Executando testes locais..."
    whoami
    id
    uname -a
    sleep 3
    menu_principal
}

# Verificando e instalando dependências
check_and_install_dependencies

# Inicia o script chamando o menu principal
menu_principal
